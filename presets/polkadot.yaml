version:
  format: 1
  # Minimum version of the binary that is expected to work. This is just for printing a nice error
  # message when someone tries to use an oder version.
  binary: 0.12.0

# The examples in this file assume crate `A` to have a dependency on crate `B`.
workflows:
  check:
    - [
        'lint',
        # Check that `A` activates the features of `B`.
        'propagate-feature',
        # These are the features to check:
        '--features=try-runtime,runtime-benchmarks,std',
        # Do not try to add a new section into `[features]` of `A` only because `B` expose that feature. There are edge-cases where this is still needed, but we can add them manually.
        '--left-side-feature-missing=ignore',
        # Ignore the case that `A` it outside of the workspace. Otherwise it will report errors in external dependencies that we have no influence on.
        '--left-side-outside-workspace=ignore',
        # Some features imply that they activate a specific dependency as non-optional. Otherwise the default behaviour with a `?` is used.
        '--feature-enables-dep=try-runtime:frame-try-runtime,runtime-benchmarks:frame-benchmarking',
        # Actually modify the files and not just report the issues:
        '--offline',
        '--locked',
        '--show-path',
        '--quiet',
      ]
      # Format the features into canonical format:
    - ['format', 'features', '--offline', '--locked', '--quiet']
  # Same as `check`, but with the `--fix` flag.
  default:
    - [ $check.0, '--fix' ]
    - [ $check.1, '--fix' ]

# Will be displayed when any workflow fails:
help:
  text:
    Polkadot-SDK uses the Zepter CLI to detect abnormalities in the feature configuration of its workspace members.
    It looks like one more more checks failed.
    To address them, it should be enough to run `$ zepter` in the root folder of the project. Otherwise please ask directly in your Merge Request or in Matrix chat.
  links:
    - "FAIL-CI TODO"
    - "https://github.com/ggwpez/zepter"
