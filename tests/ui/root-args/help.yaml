crates: []
cases:
- cmd: --help
  stdout: "Check if features are correctly propagated in your workspace.\n\nUsage: zepter [OPTIONS] <COMMAND>\n\nCommands:\n  trace   Trace the dependency path from one crate to another\n  lint    Lint your feature usage by analyzing crate metadata\n  format  Format the features in your manifest files\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --quiet\n          Only print errors. Supersedes `--log`\n\n      --log <LEVEL>\n          Log level to use\n          \n          [default: info]\n\n      --color\n          Use ANSI terminal colors\n\n      --exit-code-zero\n          Try to exit with code zero if the intended check failed.\n          \n          Will still return 1 in case of an actual error (eg. failed to find some file) or a panic\n          (aka software bug).\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n"
- cmd: lint --help
  stdout: "Lint your feature usage by analyzing crate metadata\n\nUsage: zepter lint [OPTIONS] <COMMAND>\n\nCommands:\n  propagate-feature  Check whether features are properly propagated\n  never-enables      A specific feature never enables a specific other feature\n  never-implies      A specific feature never implies a specific other feature\n  only-enables       A specific feature is only implied by a specific set of other features\n  why-enabled        Arguments for how to load cargo metadata from a workspace\n  help               Print this message or the help of the given subcommand(s)\n\nOptions:\n      --quiet\n          Only print errors. Supersedes `--log`\n\n      --log <LEVEL>\n          Log level to use\n          \n          [default: info]\n\n      --color\n          Use ANSI terminal colors\n\n      --exit-code-zero\n          Try to exit with code zero if the intended check failed.\n          \n          Will still return 1 in case of an actual error (eg. failed to find some file) or a panic\n          (aka software bug).\n\n  -h, --help\n          Print help (see a summary with '-h')\n"
- cmd: lint propagate-feature --help
  stdout: "Check whether features are properly propagated\n\nUsage: zepter lint propagate-feature [OPTIONS] --feature <FEATURE>\n\nOptions:\n      --manifest-path <MANIFEST_PATH>\n          Cargo manifest path or directory.\n          \n          For directories it appends a `Cargo.toml`.\n          \n          [default: Cargo.toml]\n\n      --workspace\n          Whether to only consider workspace crates\n\n      --offline\n          Whether to use offline mode\n\n      --locked\n          Whether to use all the locked dependencies from the `Cargo.lock`.\n          \n          Otherwise it may update some dependencies. For CI usage its a good idea to use it.\n\n      --quiet\n          Only print errors. Supersedes `--log`\n\n      --all-features\n          \n\n      --log <LEVEL>\n          Log level to use\n          \n          [default: info]\n\n      --color\n          Use ANSI terminal colors\n\n      --feature <FEATURE>\n          The feature to check\n\n      --exit-code-zero\n          Try to exit with code zero if the intended check failed.\n          \n          Will still return 1 in case of an actual error (eg. failed to find some file) or a panic\n          (aka software bug).\n\n  -p, --packages [<PACKAGES>...]\n          The packages to check. If empty, all packages are checked\n\n      --feature-enables-dep <FEATURE:CRATE>\n          The auto-fixer will enables the feature of the dependencies as non-optional.\n          \n          This can be used in case that a dependency should not be enabled like `dep?/feature` but\n          like `dep/feature` instead. In this case you would pass `--feature-enables-dep\n          feature:dep`. The option can be passed multiple times, or multiple key-value pairs can be\n          passed at once by separating them with a comma like: `--feature-enables-dep\n          feature:dep,feature2:dep2`. (TODO: Duplicate entries are undefined).\n\n      --left-side-feature-missing <MUTE_SETTING>\n          Overwrite the behaviour when the left side dependency is missing the feature.\n          \n          This can be used to ignore missing features, treat them as warning or error. A \"missing\n          feature\" here means that if `A` has a dependency `B` which has a feature `F`, and the\n          propagation is checked then normally it would error if `A` is not forwarding `F` to `B`.\n          Now this option modifies the behaviour if `A` does not have the feature in the first place.\n          The default behaviour is to require `A` to also have `F`.\n          \n          [default: error]\n\n          Possible values:\n          - ignore: Ignore this behaviour\n          - error:  Treat as error\n\n      --show-version\n          Show crate versions in the output\n\n      --fix\n          Try to automatically fix the problems\n\n      --modify-paths <MODIFY_PATHS>\n          \n\n      --fix-dependency <FIX_DEPENDENCY>\n          Fix only issues with this package as dependency\n\n      --fix-package <FIX_PACKAGE>\n          Fix only issues with this package as feature source\n\n  -h, --help\n          Print help (see a summary with '-h')\n"
